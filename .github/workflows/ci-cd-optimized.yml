name: Optimized CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  # Docker configuration
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  
  # AWS configuration
  AWS_DEFAULT_REGION: us-east-1
  
  # Application configuration
  BACKEND_IMAGE: ${{ secrets.ECR_REGISTRY }}/backend
  FRONTEND_IMAGE: ${{ secrets.ECR_REGISTRY }}/frontend
  APP_VERSION: ${{ github.sha }}
  
  # Terraform configuration
  TF_VERSION: "1.7.0"
  TF_ROOT: terraform

jobs:
  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================
  
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Secret scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # =============================================================================
  # PARALLEL DEPENDENCY INSTALLATION
  # =============================================================================
  
  install-backend-deps:
    name: Install Backend Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'backend/requirements.txt'
          
      - name: Cache Python virtual environment
        uses: actions/cache@v4
        with:
          path: backend/venv
          key: ${{ runner.os }}-python-venv-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-venv-
            
      - name: Install Python dependencies
        working-directory: ./backend
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov black flake8 bandit safety
          
      - name: Upload Python environment
        uses: actions/upload-artifact@v4
        with:
          name: python-env
          path: backend/venv/
          retention-days: 1

  install-frontend-deps:
    name: Install Frontend Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install Node.js dependencies
        working-directory: ./frontend
        run: |
          npm ci --cache .npm --prefer-offline
          
      - name: Upload Node modules
        uses: actions/upload-artifact@v4
        with:
          name: node-modules
          path: frontend/node_modules/
          retention-days: 1

  # =============================================================================
  # PARALLEL LINTING AND FORMATTING
  # =============================================================================
  
  lint-backend:
    name: Backend Linting
    runs-on: ubuntu-latest
    needs: install-backend-deps
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Download Python environment
        uses: actions/download-artifact@v4
        with:
          name: python-env
          path: backend/venv/
          
      - name: Make venv executable
        run: chmod +x backend/venv/bin/*
        
      - name: Run Black formatter check
        working-directory: ./backend
        run: |
          source venv/bin/activate
          black --check --diff .
          
      - name: Run Flake8 linter
        working-directory: ./backend
        run: |
          source venv/bin/activate
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
      - name: Run Bandit security linter
        working-directory: ./backend
        run: |
          source venv/bin/activate
          bandit -r . -f json -o bandit-report.json || true
          
      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-report
          path: backend/bandit-report.json

  lint-frontend:
    name: Frontend Linting
    runs-on: ubuntu-latest
    needs: install-frontend-deps
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Download Node modules
        uses: actions/download-artifact@v4
        with:
          name: node-modules
          path: frontend/node_modules/
          
      - name: Run ESLint
        working-directory: ./frontend
        run: |
          npm run lint
          
      - name: Run Prettier check
        working-directory: ./frontend
        run: |
          npx prettier --check "src/**/*.{js,jsx,ts,tsx,json,css,scss,md}"

  # =============================================================================
  # PARALLEL TESTING
  # =============================================================================
  
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: [install-backend-deps, security-scan]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Download Python environment
        uses: actions/download-artifact@v4
        with:
          name: python-env
          path: backend/venv/
          
      - name: Make venv executable
        run: chmod +x backend/venv/bin/*
        
      - name: Run tests with coverage
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          source venv/bin/activate
          pytest --cov=app --cov-report=xml --cov-report=html --junitxml=pytest-report.xml
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: backend/coverage.xml
          flags: backend
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pytest-results
          path: |
            backend/pytest-report.xml
            backend/htmlcov/

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: [install-frontend-deps, security-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Download Node modules
        uses: actions/download-artifact@v4
        with:
          name: node-modules
          path: frontend/node_modules/
          
      - name: Run unit tests
        working-directory: ./frontend
        run: |
          npm run test:unit:ci
          
      - name: Run integration tests
        working-directory: ./frontend
        run: |
          npm run test:integration:ci
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: frontend/coverage/lcov.info
          flags: frontend

  # =============================================================================
  # SECURITY DEPENDENCY CHECK
  # =============================================================================
  
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    needs: [install-backend-deps, install-frontend-deps]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Download Python environment
        uses: actions/download-artifact@v4
        with:
          name: python-env
          path: backend/venv/
          
      - name: Make venv executable
        run: chmod +x backend/venv/bin/*
        
      - name: Check Python dependencies with Safety
        working-directory: ./backend
        run: |
          source venv/bin/activate
          safety check --json --output safety-report.json || true
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Download Node modules
        uses: actions/download-artifact@v4
        with:
          name: node-modules
          path: frontend/node_modules/
          
      - name: Run npm audit
        working-directory: ./frontend
        run: |
          npm audit --audit-level=moderate --json > npm-audit-report.json || true
          
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            backend/safety-report.json
            frontend/npm-audit-report.json

  # =============================================================================
  # BUILD STAGE
  # =============================================================================
  
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, lint-backend, lint-frontend, dependency-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Amazon ECR
        if: github.ref == 'refs/heads/main'
        uses: aws-actions/amazon-ecr-login@v2
        env:
          AWS_REGION: ${{ env.AWS_DEFAULT_REGION }}
        
      - name: Build and cache backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ env.BACKEND_IMAGE }}:${{ env.APP_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build and cache frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ env.FRONTEND_IMAGE }}:${{ env.APP_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # =============================================================================
  # INFRASTRUCTURE DEPLOYMENT
  # =============================================================================
  
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          
      - name: Terraform Init
        working-directory: ${{ env.TF_ROOT }}
        run: terraform init
        
      - name: Terraform Plan
        working-directory: ${{ env.TF_ROOT }}
        run: |
          terraform plan \
            -var="backend_image=${{ env.BACKEND_IMAGE }}:${{ env.APP_VERSION }}" \
            -var="frontend_image=${{ env.FRONTEND_IMAGE }}:${{ env.APP_VERSION }}" \
            -out=tfplan
            
      - name: Terraform Apply
        working-directory: ${{ env.TF_ROOT }}
        run: terraform apply -auto-approve tfplan

  # =============================================================================
  # NOTIFICATION AND CLEANUP
  # =============================================================================
  
  notify-completion:
    name: Notify Deployment Completion
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Notify Success
        if: needs.deploy-infrastructure.result == 'success'
        run: echo "✅ Deployment completed successfully"
        
      - name: Notify Failure
        if: needs.deploy-infrastructure.result == 'failure'
        run: echo "❌ Deployment failed"

  cleanup:
    name: Cleanup Artifacts
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, notify-completion]
    if: always()
    steps:
      - name: Delete temporary artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            python-env
            node-modules