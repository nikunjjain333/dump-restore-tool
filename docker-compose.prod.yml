version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile.prod
    container_name: db-tool-backend
    restart: unless-stopped
    env_file:
      - .env.prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=False
    depends_on:
      - db
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile.prod
    container_name: db-tool-frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=/api
    depends_on:
      - backend
    ports:
      - "80:80"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  db:
    image: postgres:13-alpine
    container_name: db-tool-postgres
    restart: unless-stopped
    env_file:
      - .env.prod
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for caching and task queue (optional)
  redis:
    image: redis:7-alpine
    container_name: db-tool-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Celery worker for background tasks
  worker:
    build:
      context: .
      dockerfile: backend/Dockerfile.prod
    container_name: db-tool-worker
    command: celery -A app.worker worker --loglevel=info
    env_file:
      - .env.prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/0
    depends_on:
      - db
      - redis
    networks:
      - app-network

  # Celery beat for scheduled tasks
  beat:
    build:
      context: .
      dockerfile: backend/Dockerfile.prod
    container_name: db-tool-beat
    command: celery -A app.worker beat --loglevel=info
    env_file:
      - .env.prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/0
    depends_on:
      - db
      - redis
      - worker
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  dump_volume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DUMP_VOLUME_PATH:-./dumps}
