# GitLab CI/CD Pipeline for Database Dump & Restore Tool
# This pipeline handles the complete deployment process

stages:
  - install
  - test
  - build
  - deploy

variables:
  # Docker configuration
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  
  # AWS configuration
  AWS_DEFAULT_REGION: us-east-1
  
  # Application configuration
  BACKEND_IMAGE: $CI_REGISTRY_IMAGE/backend
  FRONTEND_IMAGE: $CI_REGISTRY_IMAGE/frontend
  APP_VERSION: $CI_COMMIT_SHORT_SHA
  
  # Terraform configuration
  TF_VERSION: "1.5.0"
  TF_ROOT: terraform
  TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${CI_ENVIRONMENT_NAME}

# Cache configuration
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - backend/venv/
    - frontend/node_modules/
    - .terraform/

# =============================================================================
# INSTALL STAGE
# =============================================================================

install-dependencies:
  stage: install
  image: python:3.11-slim
  tags:
    - docker
  script:
    - echo "Installing Python dependencies..."
    - cd backend
    - python -m venv venv
    - source venv/bin/activate
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install pytest pytest-cov black flake8
    - echo "Python dependencies installed successfully"
  artifacts:
    paths:
      - backend/venv/
    expire_in: 1 hour
  only:
    - merge_requests
    - main
    - develop

install-frontend-deps:
  stage: install
  image: node:18-alpine
  tags:
    - docker
  script:
    - echo "Installing Node.js dependencies..."
    - cd frontend
    - npm ci --cache .npm --prefer-offline
    - echo "Node.js dependencies installed successfully"
  artifacts:
    paths:
      - frontend/node_modules/
    expire_in: 1 hour
  only:
    - merge_requests
    - main
    - develop

install-terraform:
  stage: install
  image: hashicorp/terraform:${TF_VERSION}
  tags:
    - docker
  script:
    - echo "Installing Terraform..."
    - cd ${TF_ROOT}
    - terraform init
    - echo "Terraform initialized successfully"
  artifacts:
    paths:
      - ${TF_ROOT}/.terraform/
    expire_in: 1 hour
  only:
    - main

# =============================================================================
# TEST STAGE
# =============================================================================

test-backend:
  stage: test
  image: python:3.11-slim
  tags:
    - docker
  dependencies:
    - install-dependencies
  script:
    - echo "Running backend tests..."
    - cd backend
    - source venv/bin/activate
    - echo "Running unit tests..."
    - python -m pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=html
    - echo "Running integration tests..."
    - python -m pytest tests/integration/ -v
    - echo "Running linting..."
    - black --check app/
    - flake8 app/ --max-line-length=88
    - echo "Backend tests completed successfully"
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: backend/coverage.xml
      junit: backend/test-results.xml
    paths:
      - backend/htmlcov/
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

test-frontend:
  stage: test
  image: node:18-alpine
  tags:
    - docker
  dependencies:
    - install-frontend-deps
  script:
    - echo "Running frontend tests..."
    - cd frontend
    - echo "Running unit tests..."
    - npm run test:unit -- --coverage --watchAll=false
    - echo "Running integration tests..."
    - npm run test:integration -- --watchAll=false
    - echo "Running linting..."
    - npm run lint
    - echo "Frontend tests completed successfully"
  artifacts:
    reports:
      junit: frontend/test-results.xml
    paths:
      - frontend/coverage/
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

test-docker:
  stage: test
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  tags:
    - docker
  script:
    - echo "Testing Docker builds..."
    - echo "Testing backend Docker build..."
    - docker build -t test-backend backend/
    - echo "Testing frontend Docker build..."
    - docker build -t test-frontend frontend/
    - echo "Docker builds tested successfully"
  only:
    - merge_requests
    - main

# =============================================================================
# BUILD STAGE
# =============================================================================

build-backend:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  tags:
    - docker
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
  script:
    - echo "Building backend Docker image..."
    - docker build -t $BACKEND_IMAGE:$APP_VERSION backend/
    - docker build -t $BACKEND_IMAGE:latest backend/
    - echo "Pushing backend image to registry..."
    - docker push $BACKEND_IMAGE:$APP_VERSION
    - docker push $BACKEND_IMAGE:latest
    - echo "Backend image built and pushed successfully"
  artifacts:
    paths:
      - backend/build/
    expire_in: 1 week
  only:
    - main

build-frontend:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  tags:
    - docker
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
  script:
    - echo "Building frontend Docker image..."
    - docker build -t $FRONTEND_IMAGE:$APP_VERSION frontend/
    - docker build -t $FRONTEND_IMAGE:latest frontend/
    - echo "Pushing frontend image to registry..."
    - docker push $FRONTEND_IMAGE:$APP_VERSION
    - docker push $FRONTEND_IMAGE:latest
    - echo "Frontend image built and pushed successfully"
  artifacts:
    paths:
      - frontend/build/
    expire_in: 1 week
  only:
    - main

# =============================================================================
# DEPLOY STAGE
# =============================================================================

deploy-infrastructure:
  stage: deploy
  image: hashicorp/terraform:${TF_VERSION}
  tags:
    - docker
  dependencies:
    - install-terraform
  before_script:
    - echo "Setting up AWS credentials..."
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_DEFAULT_REGION
  script:
    - echo "Deploying infrastructure..."
    - cd ${TF_ROOT}
    - echo "Planning Terraform deployment..."
    - terraform plan -out=tfplan
    - echo "Applying Terraform deployment..."
    - terraform apply -auto-approve tfplan
    - echo "Infrastructure deployed successfully"
  environment:
    name: production
    url: $APPLICATION_URL
  artifacts:
    paths:
      - ${TF_ROOT}/terraform.tfstate
    expire_in: 1 month
  only:
    - main

deploy-application:
  stage: deploy
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  tags:
    - docker
  dependencies:
    - build-backend
    - build-frontend
  before_script:
    - echo "Setting up AWS credentials..."
    - apk add --no-cache aws-cli
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_DEFAULT_REGION
  script:
    - echo "Deploying application to ECS..."
    - echo "Updating ECS services with new images..."
    - aws ecs update-service --cluster ${ECS_CLUSTER_NAME} --service ${BACKEND_SERVICE_NAME} --force-new-deployment
    - aws ecs update-service --cluster ${ECS_CLUSTER_NAME} --service ${FRONTEND_SERVICE_NAME} --force-new-deployment
    - echo "Waiting for deployment to complete..."
    - aws ecs wait services-stable --cluster ${ECS_CLUSTER_NAME} --services ${BACKEND_SERVICE_NAME} ${FRONTEND_SERVICE_NAME}
    - echo "Application deployed successfully"
  environment:
    name: production
    url: $APPLICATION_URL
  only:
    - main

# =============================================================================
# UTILITY JOBS
# =============================================================================

security-scan:
  stage: test
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  tags:
    - docker
  script:
    - echo "Running security scan..."
    - apk add --no-cache curl
    - curl -sSL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
    - trivy image --exit-code 1 --severity HIGH,CRITICAL $BACKEND_IMAGE:$APP_VERSION
    - trivy image --exit-code 1 --severity HIGH,CRITICAL $FRONTEND_IMAGE:$APP_VERSION
    - echo "Security scan completed"
  allow_failure: true
  only:
    - main

notify-deployment:
  stage: deploy
  image: curlimages/curl:latest
  tags:
    - docker
  script:
    - echo "Sending deployment notification..."
    - |
      curl -X POST -H 'Content-type: application/json' \
      --data '{
        "text": "ðŸš€ Deployment completed successfully!",
        "attachments": [{
          "title": "Database Dump & Restore Tool",
          "title_link": "'$APPLICATION_URL'",
          "text": "New version deployed to production",
          "fields": [
            {
              "title": "Environment",
              "value": "Production",
              "short": true
            },
            {
              "title": "Version",
              "value": "'$APP_VERSION'",
              "short": true
            }
          ],
          "color": "good"
        }]
      }' \
      $SLACK_WEBHOOK_URL
    - echo "Deployment notification sent"
  dependencies:
    - deploy-application
  only:
    - main
  when: on_success

# =============================================================================
# ENVIRONMENT SPECIFIC DEPLOYMENTS
# =============================================================================

deploy-staging:
  stage: deploy
  image: hashicorp/terraform:${TF_VERSION}
  tags:
    - docker
  environment:
    name: staging
    url: $STAGING_URL
  script:
    - echo "Deploying to staging environment..."
    - cd ${TF_ROOT}
    - terraform workspace select staging || terraform workspace new staging
    - terraform apply -auto-approve -var="environment=staging"
    - echo "Staging deployment completed"
  only:
    - develop

# =============================================================================
# CLEANUP JOBS
# =============================================================================

cleanup-old-images:
  stage: deploy
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  tags:
    - docker
  script:
    - echo "Cleaning up old Docker images..."
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - docker system prune -f
    - echo "Cleanup completed"
  only:
    - main
  when: always 