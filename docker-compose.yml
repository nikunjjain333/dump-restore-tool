version: '3.8'

services:
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: db-tool-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-dump_restore}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key}
      - DEBUG=${DEBUG:-True}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:8000}
    volumes:
      - ./dumps:/app/dumps
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    depends_on:
      db:
        condition: service_healthy

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: db-tool-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=/api
      - NODE_ENV=development
      - PORT=3000
      - HOST=0.0.0.0
    volumes:
      - ./frontend/src:/app/src
      - /app/node_modules
    networks:
      - app-network
    depends_on:
      - backend

  db:
    image: postgres:13-alpine
    container_name: db-tool-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-dump_restore}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  dump_volume:
